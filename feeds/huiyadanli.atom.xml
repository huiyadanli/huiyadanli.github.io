<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>一亩地</title><link href="http://huiyadanli.github.io/" rel="alternate"></link><link href="http://huiyadanli.github.io/feeds/huiyadanli.atom.xml" rel="self"></link><id>http://huiyadanli.github.io/</id><updated>2016-05-14T17:37:00+08:00</updated><entry><title>在 GitHub Contributions上画像素画</title><link href="http://huiyadanli.github.io/soft/GitHub-Contributions.html" rel="alternate"></link><updated>2016-05-14T17:37:00+08:00</updated><author><name>huiyadanli</name></author><id>tag:huiyadanli.github.io,2016-05-14:soft/GitHub-Contributions.html</id><summary type="html">&lt;p&gt;只需要用 &lt;a href="https://github.com/IonicaBizau/github-contributions"&gt;gh-contributions&lt;/a&gt; 设置好要画的图案，然后它就能生成一个 repo ，上传这个 repo 就能看到效果了。&lt;/p&gt;
&lt;h2 id="9e1bb0"&gt;使用说明&lt;/h2&gt;
&lt;p&gt;直接按照  &lt;a href="https://github.com/IonicaBizau/github-contributions"&gt;gh-contributions&lt;/a&gt; 作者说的做就可以了。&lt;/p&gt;
&lt;p&gt;我在 windows 下使用的时候出乱码提示，不懂 node-js ，所以也没找到原因所在。&lt;/p&gt;
&lt;p&gt;然后改用 ubuntu 本地安装   &lt;a href="https://github.com/IonicaBizau/github-contributions"&gt;gh-contributions&lt;/a&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;$ git clone https://github.com/IonicaBizau/github-contributions.git
$ cd github-contributions
$ npm i
$ npm start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是在 &lt;code&gt;npm start&lt;/code&gt; 这一步的时候报错&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&amp;gt; gh-contributions@3.0.1 start /home/huiyadanli/soft/github-contributions
&amp;gt; node ./lib/server.js

sh: 1: node: not found
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一番搜索以后发现 &lt;code&gt;node&lt;/code&gt; 命令被更名为  &lt;code&gt;nodejs&lt;/code&gt; ，使用这条命令&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;nodejs lib/server.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;手动启动就可以使用了。（貌似安装 &lt;code&gt;nodejs-legacy&lt;/code&gt; 就不会出现这个问题了）&lt;/p&gt;
&lt;p&gt;成功启动后，打开 &lt;code&gt;localhost:9000&lt;/code&gt; 尽情的作画吧&lt;/p&gt;
&lt;p&gt;&lt;img alt="Contributions" src="http://huiyadanli.github.io/static/article/contributions_2.png"/&gt;&lt;/p&gt;
&lt;p&gt;画完后点击 &lt;code&gt;Generate repository from data&lt;/code&gt; 就会自动生成一个 repo，上传就能看到效果了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Contributions" src="http://huiyadanli.github.io/static/article/contributions.png"/&gt;&lt;/p&gt;
&lt;h2 id="1c1648"&gt;类似软件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gelstudios/gitfiti"&gt;gitfiti&lt;/a&gt;  这个是 Python 写的，没有用过&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ben174/git-draw"&gt;Git Draw&lt;/a&gt; 最近刚刚发现的，一个 Chrome 插件&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GitHub"></category></entry><entry><title>C# 浪微博模拟页面解析，提取各条微博内容</title><link href="http://huiyadanli.github.io/code/WeiboMonitor.html" rel="alternate"></link><updated>2016-04-21T17:03:00+08:00</updated><author><name>huiyadanli</name></author><id>tag:huiyadanli.github.io,2016-04-21:code/WeiboMonitor.html</id><summary type="html">&lt;p&gt;本文主要是通过解析页面来提取各条微博的内容和相关信息。&lt;/p&gt;
&lt;h2 id="add2db"&gt;提取页面&lt;/h2&gt;
&lt;p&gt;下面是一个微博页面的源码段，微博页面采用 BigPipe 网页加载模式，使用 FM.view() 对页面分块加载，让你能更快的看到内容。&lt;/p&gt;
&lt;p&gt;&lt;img alt="js" src="http://huiyadanli.github.io/static/article/weibo_js.png"/&gt;&lt;/p&gt;
&lt;p&gt;这种页面加载模式导致不能直接使用HTML解析器去提取各条微博，使用正则表达式提取的话，工作量又太大。&lt;/p&gt;
&lt;p&gt;Ctrl + F 微博正文可以找出各条微博内容都在 &lt;code&gt;&amp;lt;script&amp;gt;FM.view({"ns":"pl.content.homeFeed.index"&lt;/code&gt; 开头的那一行 js 中，这段字符串就是要操作的对象。&lt;/p&gt;
&lt;p&gt;观察过后发现 FM.view() 内使用的 Json 格式，果断尝试使用 &lt;a href="http://www.newtonsoft.com/json"&gt;Newtonsoft.Json&lt;/a&gt; 对其中的数据进行反序列化。&lt;/p&gt;
&lt;p&gt;先写一个对应其格式的类，格式可以用 &lt;a href="http://json.cn/"&gt;在线解析器&lt;/a&gt;  查看&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;/// &amp;lt;summary&amp;gt;
/// 用于Json解析
/// &amp;lt;/summary&amp;gt;
public class ViewJson
{
    public string ns { get; set; }
    public string domid { get; set; }
    public string[] css { get; set; }
    public string js { get; set; }
    public string html { get; set; } 
} 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后直接使用 &lt;a href="http://www.newtonsoft.com/json"&gt;Newtonsoft.Json&lt;/a&gt; 提供的 &lt;code&gt;JsonConvert.DeserializeObject&amp;lt;T&amp;gt;()&lt;/code&gt; 方法反序列化 Json 数据。&lt;code&gt;viewJson.html&lt;/code&gt; 就是我需要的内容（各条微博的信息都在里面）&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; //取出&amp;lt;script&amp;gt;标签内的Json数据
string jsonStr = jsStr.Replace("&amp;lt;script&amp;gt;FM.view(", "").Replace(")&amp;lt;/script&amp;gt;", "");
 //使用 Newtonsoft.Json 反序列化
ViewJson viewJson = JsonConvert.DeserializeObject&amp;lt;ViewJson&amp;gt;(jsonStr);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="51a731"&gt;页面解析&lt;/h2&gt;
&lt;p&gt;C# 解析 HTML 当选 &lt;a href="http://htmlagilitypack.codeplex.com/"&gt;HtmlAgilityPack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;找到顶层节点然后使用 &lt;a href="http://www.w3school.com.cn/xpath/"&gt;XPath&lt;/a&gt; 得到自己所需要的数据，这是个体力活，直接给出代码。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;// 使用 HtmlAgilityPack 解析HTML
HtmlDocument doc = new HtmlDocument();
// 载入刚刚得到的 viewJson.html
doc.LoadHtml(viewJson.html);
HtmlNode topNode = doc.DocumentNode.ChildNodes[1];
// 我自己定义的 WeiboFeed 类，用于存放微博
List&amp;lt;WeiboFeed&amp;gt; wbFeedList = new List&amp;lt;WeiboFeed&amp;gt;();

foreach (HtmlNode feedListItem in topNode.ChildNodes)
{
    if (feedListItem.Attributes.Contains("action-type") &amp;amp;&amp;amp; feedListItem.Attributes["action-type"].Value == "feed_list_item")
    {
        // 微博 mid
        string mid = feedListItem.Attributes["mid"].Value;
        // 发送该微博的用户的昵称
        string username = feedListItem.SelectSingleNode("div[1]/div[@class='WB_detail']/div[1]/a[1]").InnerHtml;
        // 发送时间
        string time = feedListItem.SelectSingleNode("div[1]/div[@class='WB_detail']/div[2]/a[1]").Attributes["title"].Value;
        // 微博正文内容
        string content = feedListItem.SelectSingleNode("div[1]/div[@class='WB_detail']/div[3]").InnerHtml;

        WeiboFeed wbFeedTmp = new WeiboFeed(this, mid, username, time, content);
        wbFeedList.Add(wbFeedTmp);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ede752"&gt;附赠&lt;/h2&gt;
&lt;p&gt;以上东西的应用：&lt;a href="https://github.com/huiyadanli/WeiboMonitor"&gt;微博秒赞器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="界面" src="https://raw.githubusercontent.com/huiyadanli/WeiboMonitor/master/image/screenshot0.png"/&gt;&lt;/p&gt;</summary><category term="C#"></category><category term="Json"></category><category term="Javascript"></category><category term="HTML"></category></entry><entry><title>C# 实现新浪微博模拟登录v1.4.18</title><link href="http://huiyadanli.github.io/code/sinaLogin.html" rel="alternate"></link><updated>2016-03-10T23:03:00+08:00</updated><author><name>huiyadanli</name></author><id>tag:huiyadanli.github.io,2016-03-10:code/sinaLogin.html</id><summary type="html">&lt;p&gt;14年暑假写的东西，今天试用了一下发现居然还能用。&lt;/p&gt;
&lt;h2 id="e82624"&gt;模拟登录原理&lt;/h2&gt;
&lt;p&gt;1.输入用户名时，发送如下GET请求，返回一大堆登录所需要的参数。其中&lt;code&gt;entry&lt;/code&gt; &lt;code&gt;callback&lt;/code&gt; &lt;code&gt;rsakt&lt;/code&gt; &lt;code&gt;client&lt;/code&gt;参数都是固定不变的，&lt;code&gt;su&lt;/code&gt;是经过Base64加密后的用户名，&lt;code&gt;checkpin&lt;/code&gt; =1时，会返回&lt;code&gt;showpin&lt;/code&gt;告诉你是否需要验证码，&lt;code&gt;_&lt;/code&gt;很明显是时间戳，没有这个参数也可以正常得到返回信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://login.sina.com.cn/sso/prelogin.php?entry=weibo&amp;amp;callback=sinaSSOController.preloginCallBack&amp;amp;su=aHVpeWFkYW5saSU0MDEyNi5jb20%3D&amp;amp;rsakt=mod&amp;amp;checkpin=1&amp;amp;client=ssologin.js(v1.4.18)&amp;amp;_=1457524967315&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回信息如下，后面会用到 &lt;code&gt;servertime&lt;/code&gt; &lt;code&gt;nonce&lt;/code&gt; &lt;code&gt;pcid&lt;/code&gt; &lt;code&gt;pubkey&lt;/code&gt; &lt;code&gt;rsakv&lt;/code&gt; 这几个参数，其中&lt;code&gt;pubkey&lt;/code&gt; &lt;code&gt;rsakv&lt;/code&gt;的值是固定的（1年多都没变）。
还有一个&lt;code&gt;showpin&lt;/code&gt;上面已经说到了，告诉你是否需要验证码，此处的值为0是不需要的，频繁登录时会需要验证码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sinaSSOController.preloginCallBack({"retcode":0,"servertime": 1457525116,
"pcid":"ja-69837828b9f065232d6ea4a3130fe2cdbd47","nonce":"7R4XFC",
"pubkey":"EB2A38568661887FA180BDDB5CABD5F21C7BFD59C090CB2D245A87AC253062
882729293E5506350508E7F9AA3BB77F4333231490F915F6D63C55FE2F08A49B353F
444AD3993CACC02DB784ABBB8E42A9B1BBFFFB38BE18D78E87A0E41B9B8F73A928EE0CCEE1F6
739884B9777E4FE9E88A1BBE495927AC4A799B3181D6442443",
"rsakv":"1330428213","is_openlock":0,"showpin":0,"exectime":12})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.自己构造以下数据POST到http://login.sina.com.cn/sso/login.php?client=ssologin.js(v1.4.18)
其中&lt;code&gt;su&lt;/code&gt;依旧是Base64加密后的用户名，&lt;code&gt;servertime&lt;/code&gt; &lt;code&gt;nonce&lt;/code&gt; &lt;code&gt;rsakv&lt;/code&gt; 字段的值就是刚刚GET得到的值，&lt;code&gt;sp&lt;/code&gt;是经过RSA2加密后的密码。其余的值都可以保持不变。
这里有一个登录的难点就是RSA2加密，其实加密的方法就在ssologin.js中，直接用C#调用那段RSA2加密的js即可。详细方法：http://www.cnblogs.com/coding1016/archive/2013/03/25/2980310.html&lt;/p&gt;
&lt;p&gt;！如果上面一步的返回值&lt;code&gt;showpin&lt;/code&gt;=1，则需要GET  http://login.sina.com.cn/cgi/pin.php?p=&lt;code&gt;pcid&lt;/code&gt; 来得到验证码图片（&lt;code&gt;pcid&lt;/code&gt; 也来自上一步哟），然后在下面的POST数据中加上&lt;code&gt;pcid&lt;/code&gt; &lt;code&gt;door&lt;/code&gt; 两个字段，&lt;code&gt;door&lt;/code&gt;的值就是验证码的值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;entry=weibo&amp;amp;gateway=1&amp;amp;from=&amp;amp;savestate=7&amp;amp;useticket=1&amp;amp;pagerefer=
&amp;amp;vsnf=1&amp;amp;su=aHVpeWFkYW5saSU0MDEyNi5jb20%3D&amp;amp;service=miniblog&amp;amp;servertime=1457525116
&amp;amp;nonce=7R4XFC&amp;amp;pwencode=rsa2&amp;amp;rsakv=1330428213&amp;amp;sp=&lt;code&gt;加密后的密码&lt;/code&gt;
&amp;amp;sr=1745*982&amp;amp;encoding=UTF-8&amp;amp;prelt=78&amp;amp;url=http%3A%2F%2F
www.weibo.com%2Fajaxlogin.php%3Fframelogin%3D1%26
callback%3Dparent.sinaSSOController.feedBackUrlCallBack&amp;amp;returntype=META&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;POST以后会返回一个页面，location.replace 后面就是下一步要跳转的页面，其中还有个retcode参数告诉你登录的结果（0-登录成功，2070-验证码错误，4049-验证码为空，101密码错误）&lt;/p&gt;
&lt;p&gt;跳转到那个页面，就可以得到登录的cookie，模拟登录完成。&lt;/p&gt;
&lt;h2 id="a6e20d"&gt;C#实现&lt;/h2&gt;
&lt;p&gt;直接看代码吧：
&lt;a href="https://github.com/huiyadanli/SinaLogin"&gt;https://github.com/huiyadanli/SinaLogin&lt;/a&gt;&lt;/p&gt;</summary><category term="C#"></category><category term="模拟登录"></category></entry><entry><title>成功使用pelican在github上搭建了自己的博客</title><link href="http://huiyadanli.github.io/life/build-a-blog.html" rel="alternate"></link><updated>2015-11-23T22:24:00+08:00</updated><author><name>huiyadanli</name></author><id>tag:huiyadanli.github.io,2015-11-23:life/build-a-blog.html</id><summary type="html">&lt;p&gt;很久很久以前（3年前），我在BAE上用WordPress搭建过一个blog，上传过几个自己写着玩的软件，顺带一些软件推荐，然后...然后它被我遗忘在某个小角落...欠费致死。&lt;/p&gt;
&lt;h3 id="63177c"&gt;未完成的新博客&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;是什么原因让我又来搞了个博客来糟蹋呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让我那些散落在硬盘角落里的东西重见天日。&lt;/li&gt;
&lt;li&gt;顺便折腾下Python，还有提升我那半吊子的前端能力。&lt;/li&gt;
&lt;li&gt;提升逼格！（这才是主要原因吧 (╯°Д°)╯︵ ┻━┻ ）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我用了些什么东西来建造博客？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机：&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;  （贱笑）&lt;/li&gt;
&lt;li&gt;域名：打算在Godaddy买个，名字叫什么真的好纠结呢。&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;生成的静态博客，并加装了&lt;a href="http://blog.atime.me/"&gt;Ma Wenbao&lt;/a&gt;的&lt;a href="https://github.com/mawenbao/niu-x2-sidebar/tree/master"&gt;Niu-X2&lt;/a&gt;主题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容我再折腾折腾。&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category><category term="blog"></category></entry></feed>