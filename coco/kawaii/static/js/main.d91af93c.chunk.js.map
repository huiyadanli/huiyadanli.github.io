{"version":3,"sources":["index.tsx"],"names":["getFirstPinyin","data","pinyin","split","shift","getLastPinyin","pop","fix","word","replace","endsWith","indexed","json","result","firstPinyin","lastPinyin","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","length","key1","values1","push","key2","values2","err","return","pinyins","Set","_loop","level","newpinyins","forEach","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","add","console","log","concat","size","handle","input","state","_loop2","v","filtered","filter","d","Math","floor","random","_ret","ReactDOM","render","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_React$useState","React","useState","_React$useState2","Object","D_COCO_200_cocokawaii_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","setState","_React$useState3","_React$useState4","seq","setSeq","keys","className","style","color","type","onChange","e","target","map","key","error","fetch","then","res","catch","D_COCO_200_cocokawaii_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","document","getElementsByTagName"],"mappings":"oLA8BMA,eAAiB,SAACC,GACtB,OAAOA,EAAKC,OAAOC,MAAM,OAAOC,SAAW,KAGvCC,EAAgB,SAACJ,GACrB,OAAOA,EAAKC,OAAOC,MAAM,OAAOG,OAAS,IAGrCC,EAAM,SAACN,GAQX,MAPI,6BAAWA,EAAKO,OAClBP,EAAKC,OAASD,EAAKC,OAAOO,QAAQ,QAAM,UAEtCR,EAAKO,KAAKE,SAAS,YACrBT,EAAKC,OAASD,EAAKC,OAAOO,QAAQ,aAAS,aAE7CR,EAAKC,OAASD,EAAKC,OAAOO,QAAQ,mCAAiB,OAC5CR,GAGHU,EAAU,SAACC,GACf,IAAMC,EAAgB,CAAEC,YAAa,GAAIC,WAAY,GAAIP,KAAM,IAD/BQ,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEhC,QAAAC,EAAAC,EAAmBT,EAAnBU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAyB,KAAdf,EAAcmB,EAAAM,MAEvB,GADAnB,EAAIN,GACqB,IAArBA,EAAKO,KAAKmB,OAAc,CAC1B,IAAMC,EAAOvB,EAAcJ,GACrB4B,EAAUhB,EAAOE,WAAWa,IAAS,GAC3Cf,EAAOE,WAAWa,GAAQC,EAC1BA,EAAQC,KAAK7B,GAEb,IAAM8B,EAAO/B,EAAeC,GACtB+B,EAAUnB,EAAOC,YAAYiB,IAAS,GAC5ClB,EAAOC,YAAYiB,GAAQC,EAC3BA,EAAQF,KAAK7B,GAEbY,EAAOL,KAAKP,EAAKO,MAAQP,IAfG,MAAAgC,GAAAhB,GAAA,EAAAC,EAAAe,EAAA,YAAAjB,GAAA,MAAAK,EAAAa,QAAAb,EAAAa,SAAA,WAAAjB,EAAA,MAAAC,GAmBhC,IADA,IAAIiB,EAAU,IAAIC,IAAI,CAAC,YAlBSC,EAAA,SAmBvBC,GACP,IAAMC,EAAa,IAAIH,IACvBD,EAAQK,QAAQ,SAAAtC,GAAU,IAAAuC,GAAA,EAAAC,GAAA,EAAAC,OAAAxB,EAAA,IACxB,QAAAyB,EAAAC,GAAmBhC,EAAOE,WAAWb,IAAW,IAAhDoB,OAAAC,cAAAkB,GAAAG,EAAAC,EAAArB,QAAAC,MAAAgB,GAAA,EAAoD,KAAzCxC,EAAyC2C,EAAAlB,MAC7CzB,EAAKqC,QACRrC,EAAKqC,MAAQA,EACbC,EAAWO,IAAI9C,EAAeC,MAJV,MAAAgC,GAAAS,GAAA,EAAAC,EAAAV,EAAA,YAAAQ,GAAA,MAAAI,EAAAX,QAAAW,EAAAX,SAAA,WAAAQ,EAAA,MAAAC,MAQ1BI,QAAQC,IAAR,YAAAC,OAAwBV,EAAWW,KAAnC,uBAAAD,OAA6DX,IAC7DH,EAAUI,GAXHD,EAAQ,EAAGH,EAAQe,KAAO,IAAKZ,EAAOD,EAAtCC,GAaT,OAAOzB,GAGHsC,EAAS,SAACC,EAAeC,GAG7B,IAFA,IAAMxC,EAAmB,GACrBZ,EAAOoD,EAAM7C,KAAK4C,GAFwBE,EAAA,WAI5C,IAAMhB,EAAQrC,EAAKqC,MAEnB,GADAzB,EAAOiB,KAAP,GAAAmB,OAAehD,EAAKO,KAApB,UAAAyC,OAA4BhD,EAAKC,OAAjC,aACIoC,EAAQ,GAMV,OADAzB,EAAOiB,KAAK,+DACZ,CAAAyB,EAAO1C,GALP,IACM2C,EADOH,EAAMvC,YAAYT,EAAcJ,IACvBwD,OAAO,SAAAC,GAAC,OAAIA,EAAEpB,OAASoB,EAAEpB,MAAQA,IACvDrC,EAAOuD,EAASG,KAAKC,MAAMD,KAAKE,SAAWL,EAAS7B,UANjD1B,GAAQA,EAAKqC,OAAO,KAAAwB,EAAAR,IAAA,qBAAAQ,EAAA,OAAAA,EAAAP,EAY3B,OAAO1C,GA2DTkD,IAASC,OAAOC,EAAAC,EAAAC,cAxDhB,WAAe,IAAAC,EACaC,IAAMC,SAAgB,CAC9CxD,YAAa,GACbC,WAAY,GACZP,KAAM,KAJK+D,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNf,EADMkB,EAAA,GACCG,EADDH,EAAA,GAAAI,EAMSN,IAAMC,SAAmB,IANlCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAMNE,EANMD,EAAA,GAMDE,EANCF,EAAA,GAQb,OAAIJ,OAAOO,KAAK1B,EAAM7C,MAAMmB,OAAS,EAEjCsC,EAAAC,EAAAC,cAAA,OAAKa,UAAU,iBACbf,EAAAC,EAAAC,cAAA,yBACIF,EAAAC,EAAAC,cAAA,QAAMc,MAAO,CAAEC,MAAO,SAAtB,SAEJjB,EAAAC,EAAAC,cAAA,iRACAF,EAAAC,EAAAC,cAAA,yHAAsBF,EAAAC,EAAAC,cAAA,qBAAOF,EAAAC,EAAAC,cAAA,qBAAP,SAAmBF,EAAAC,EAAAC,cAAA,mBAAnB,KAAgCF,EAAAC,EAAAC,cAAA,sBAAhC,KAA8CF,EAAAC,EAAAC,cAAA,uBAApE,KACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SACEgB,KAAK,QACLC,SAAU,SAAAC,GAAC,OAAIP,EAAO3B,EAAOkC,EAAEC,OAAO5D,MAAO2B,QAGjDY,EAAAC,EAAAC,cAAA,UACGU,EAAIU,IAAI,SAAAtF,GACP,OAAOgE,EAAAC,EAAAC,cAAA,MAAIqB,IAAKvF,GAAOA,OAKtBoD,EAAMoC,MAEbxB,EAAAC,EAAAC,cAAA,OAAKa,UAAU,iBACbf,EAAAC,EAAAC,cAAA,yBACIF,EAAAC,EAAAC,cAAA,QAAMc,MAAO,CAAEC,MAAO,SAAtB,SAEJjB,EAAAC,EAAAC,cAAA,KAAGc,MAAO,CAAEC,MAAO,QAAnB,sGAAAjC,OACEI,EAAMoC,UAOZC,MADE,qEAECC,KAAK,SAAAC,GAAG,OAAIA,EAAIhF,SAChB+E,KAAK,SAAA/E,GAAI,OAAI8D,EAAS/D,EAAQC,MAC9BiF,MAAM,SAAAJ,GAAK,OAAIf,EAASF,OAAAsB,EAAA,EAAAtB,CAAA,GAAKnB,EAAN,CAAaoC,aAErCxB,EAAAC,EAAAC,cAAA,OAAKa,UAAU,iBACbf,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,iDAMQ,MAAS4B,SAASC,qBAAqB,QAAQ","file":"static/js/main.d91af93c.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport \"./github-markdown.css\";\nimport bg from \"./coconut.png\";\n\ninterface Data {\n  abbreviation: string;\n  derivation: string;\n  example: string;\n  explanation: string;\n  pinyin: string;\n  word: string;\n  level?: number;\n}\n\ninterface State {\n  firstPinyin: {\n    [key: string]: Data[];\n  };\n  lastPinyin: {\n    [key: string]: Data[];\n  };\n  word: {\n    [key: string]: Data;\n  };\n  error?: string;\n}\n\nconst getFirstPinyin = (data: Data) => {\n  return data.pinyin.split(/\\s+/).shift() || \"\";\n};\n\nconst getLastPinyin = (data: Data) => {\n  return data.pinyin.split(/\\s+/).pop() || \"\";\n};\n\nconst fix = (data: Data) => {\n  if (\"味同嚼蜡\" === data.word) {\n    data.pinyin = data.pinyin.replace(\"cù\", \"là\");\n  }\n  if (data.word.endsWith(\"俩\")) {\n    data.pinyin = data.pinyin.replace(\"liǎng\", \"liǎ\");\n  }\n  data.pinyin = data.pinyin.replace(/yi([ēéěèêe])/g, \"y$1\");\n  return data;\n};\n\nconst indexed = (json: Data[]) => {\n  const result: State = { firstPinyin: {}, lastPinyin: {}, word: {} };\n  for (const data of json) {\n    fix(data);\n    if (data.word.length === 4) {\n      const key1 = getLastPinyin(data);\n      const values1 = result.lastPinyin[key1] || [];\n      result.lastPinyin[key1] = values1;\n      values1.push(data);\n\n      const key2 = getFirstPinyin(data);\n      const values2 = result.firstPinyin[key2] || [];\n      result.firstPinyin[key2] = values2;\n      values2.push(data);\n\n      result.word[data.word] = data;\n    }\n  }\n  let pinyins = new Set([\"kě\"]);\n  for (let level = 1; pinyins.size > 0; ++level) {\n    const newpinyins = new Set<string>();\n    pinyins.forEach(pinyin => {\n      for (const data of result.lastPinyin[pinyin] || []) {\n        if (!data.level) {\n          data.level = level;\n          newpinyins.add(getFirstPinyin(data));\n        }\n      }\n    });\n    console.log(`Generate ${newpinyins.size} entries for level ${level}`);\n    pinyins = newpinyins;\n  }\n  return result;\n};\n\nconst handle = (input: string, state: State) => {\n  const result: string[] = [];\n  let data = state.word[input];\n  while (data && data.level) {\n    const level = data.level;\n    result.push(`${data.word}（${data.pinyin}）`);\n    if (level > 1) {\n      const next = state.firstPinyin[getLastPinyin(data)];\n      const filtered = next.filter(d => d.level && d.level < level);\n      data = filtered[Math.floor(Math.random() * filtered.length)];\n    } else {\n      result.push(\"可爱coco（kě ài kōu kōu）\");\n      return result;\n    }\n  }\n  return result;\n};\n\nfunction App() {\n  const [state, setState] = React.useState<State>({\n    firstPinyin: {},\n    lastPinyin: {},\n    word: {}\n  });\n  const [seq, setSeq] = React.useState<string[]>([]);\n\n  if (Object.keys(state.word).length > 0) {\n    return (\n      <div className=\"markdown-body\">\n        <h1>\n          可爱<span style={{ color: \"pink\" }}>COCO</span>\n        </h1>\n        <p>有了这个，我就可以每次在和COCO的成语接龙比赛中完美胜出啦，因为没有 kōu 开头的成语，嘎嘎嘎嘎</p>\n        <p>请输入一个四字成语，将自动为你接龙到\"<ruby>可<rt>kě</rt>爱<rt>ài</rt>co<rt>kōu</rt>co<rt>kōu</rt></ruby>\"</p>\n        <p>\n          <input\n            type=\"input\"\n            onChange={e => setSeq(handle(e.target.value, state))}\n          />\n        </p>\n        <ul>\n          {seq.map(data => {\n            return <li key={data}>{data}</li>;\n          })}\n        </ul>\n      </div>\n    );\n  } else if (state.error) {\n    return (\n      <div className=\"markdown-body\">\n        <h1>\n          可爱<span style={{ color: \"pink\" }}>COCO</span>\n        </h1>\n        <p style={{ color: \"red\" }}>{`数据加载中...加载异常，请刷新重试：${\n          state.error\n        }`}</p>\n      </div>\n    );\n  } else {\n    const url =\n      \"https://cdn.jsdelivr.net/gh/pwxcoo/chinese-xinhua/data/idiom.json\";\n    fetch(url)\n      .then(res => res.json())\n      .then(json => setState(indexed(json)))\n      .catch(error => setState({ ...state, error }));\n    return (\n      <div className=\"markdown-body\">\n        <h1>可爱COCO</h1>\n        <p>数据加载中...</p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementsByTagName(\"main\")[0]);\n"],"sourceRoot":""}